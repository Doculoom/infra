name: Terraform

on:
  push:
    branches:
      - main

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: false

jobs:
  terraform:
    name: "Infra"
    runs-on: ubuntu-latest

    env:
      TF_VAR_gemini_key: ${{ secrets.GEMINI_API_KEY }}
      TF_VAR_telegram_key: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TF_VAR_vault_api_url: ${{ secrets.VAULT_API_URL }}
      TF_VAR_her_api_url: ${{ secrets.HER_API_URL }}
      TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
      TF_VAR_region: ${{ secrets.GCP_REGION }}
      TF_VAR_service_account_email: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
      TF_VAR_google_api_key: ${{ secrets.GOOGLE_API_KEY }}
      TF_VAR_memory_dump_seconds: ${{ secrets.MEMORY_DUMP_SECONDS }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Initialize Terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: terraform init

      - name: Validate Terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: terraform validate

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GOOGLE_CREDENTIALS }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Import Existing Firestore Indexes
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        continue-on-error: true
        run: |
          PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
          DATABASE="vault"
          
          echo "üîç Checking Terraform state..."
          TIMESTAMP_IN_STATE=$(terraform state list | grep "google_firestore_index.timestamp_index" || echo "")
          MEMORIES_IN_STATE=$(terraform state list | grep "google_firestore_index.memories_composite_index" || echo "")
          
          echo "üîç Checking GCP for existing indexes..."
          
          # Import timestamp index if not in state but exists in GCP
          if [ -z "$TIMESTAMP_IN_STATE" ]; then
            TIMESTAMP_INDEX=$(gcloud firestore indexes composite list \
              --database="$DATABASE" \
              --format="value(name)" \
              --project="$PROJECT_ID" 2>/dev/null | grep "messages" | head -n1 || echo "")
            
            if [ -n "$TIMESTAMP_INDEX" ]; then
              FULL_PATH="projects/$PROJECT_ID/databases/$DATABASE/collectionGroups/messages/indexes/$TIMESTAMP_INDEX"
              echo "üì• Importing timestamp_index: $FULL_PATH"
              terraform import module.vault.google_firestore_index.timestamp_index "$FULL_PATH" 2>/dev/null || echo "‚ö†Ô∏è Import failed, will handle in apply step"
            else
              echo "‚ÑπÔ∏è timestamp_index not found in GCP"
            fi
          else
            echo "‚úÖ timestamp_index already in state"
          fi
          
          # Import memories index if not in state but exists in GCP
          if [ -z "$MEMORIES_IN_STATE" ]; then
            MEMORIES_INDEX=$(gcloud firestore indexes composite list \
              --database="$DATABASE" \
              --format="value(name)" \
              --project="$PROJECT_ID" 2>/dev/null | grep "memories" | head -n1 || echo "")
            
            if [ -n "$MEMORIES_INDEX" ]; then
              FULL_PATH="projects/$PROJECT_ID/databases/$DATABASE/collectionGroups/memories/indexes/$MEMORIES_INDEX"
              echo "üì• Importing memories_composite_index: $FULL_PATH"
              terraform import module.vault.google_firestore_index.memories_composite_index "$FULL_PATH" 2>/dev/null || echo "‚ö†Ô∏è Import failed, will handle in apply step"
            else
              echo "‚ÑπÔ∏è memories_composite_index not found in GCP"
            fi
          else
            echo "‚úÖ memories_composite_index already in state"
          fi

      - name: Refresh Terraform State
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: terraform apply -refresh-only -auto-approve

      - name: Plan Terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: terraform plan -out=tfplan

      - name: Apply Terraform (Manual Approval)
        if: github.event_name == 'push'
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          set +e  # Don't exit on error
          terraform apply -auto-approve tfplan 2>&1 | tee apply_output.txt
          EXIT_CODE=${PIPESTATUS[0]}
          
          # Check if the only error is "index already exists"
          if [ $EXIT_CODE -ne 0 ]; then
            if grep -q "Error 409: index already exists" apply_output.txt; then
              echo "‚ö†Ô∏è  Warning: Firestore indexes already exist in GCP, this is expected"
              echo "‚úÖ Other resources applied successfully"
              exit 0  # Treat as success
            else
              echo "‚ùå Apply failed with non-index errors"
              exit $EXIT_CODE
            fi
          fi
          
          echo "‚úÖ Apply completed successfully"
          exit 0